from pprint import pformat
from Queue import Queue

from twisted.internet import reactor
import twisted.internet.defer
from twisted.internet.protocol import Protocol
from twisted.web.client import Agent
from twisted.web.http_headers import Headers
from twisted.internet import error 

import sys
sys.path.append('/home/ec2-user/bblio/build/')
import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'Build.settings'
import chardet
import datetime
from time import sleep

from search.models import Document
update_group = 1

class PrinterClient(Protocol):
    def __init__(self, whenFinished,Document,charset):
        self.whenFinished = whenFinished
        self._data = ''
        self._doc = Document
        self._charset = charset

    def dataReceived(self, bytes):
        self._data += bytes

    def connectionLost(self, reason):
        if reason.check(twisted.web.client.ResponseDone):
            if self._charset == 'ASCII':
                self._data = self._data.decode('ascii').encode('utf-8')
            elif self._charset != 'UTF-8':
                self._data = self._data.decode(chardet.detect(self._data)['encoding']).encode('utf-8')

            self.whenFinished.callback(handleFinish(self._data, self._doc))
        else:   
            print 'Finish Connection:', reason.getErrorMessage()
            self.whenFinished.callback(handleFinish('', self._doc))

def handleFinish(r,Document):
    try:
        if len(r) == 0:
            Document.response_code = 1000
        else:
            Document.document_html = r.decode('utf-8')
            Document.update_group = 1
    except:
        Document.response_code = 999
    finally:
        Document.lastupdate = datetime.datetime.now()
        Document.save()

    print '[Finish] Handle: %s' % str(Document.id)


def handleResponse(r,Document):
    print "[code=%s] %s" % (r.code, Document.urlAddress)

    charset = ''
    try:
        charset = r.headers.getRawHeaders('content-type')[0].split('; ')[1].split('=')[1]
    except:
        pass

    whenFinished = twisted.internet.defer.Deferred()
    p = PrinterClient(whenFinished,Document,charset)
    r.deliverBody(p)
    Document.response_code = r.code
    Document.save(update_fields=['response_code'])
    return whenFinished

def handleError(reason):
    reason.printTraceback()
    #reactor.stop()

def getPage(Document):
    print "[Requesting] %s" % (Document.urlAddress,)
    d = Agent(reactor).request('GET', Document.urlAddress.encode('ascii'), Headers({'User-Agent': ['twisted']}), None)    
    d.addCallback(handleResponse, Document)
    d.addErrback(handleError)
    sleep(0.3)
    return d

semaphore = twisted.internet.defer.DeferredSemaphore(25)
dl = list()

rando = Document.objects.exclude(update_group=1).filter(isUsed=0).order_by('?')[0:2000]
#rando = Document.objects.exclude(update_group=1).filter(isUsed=0)[:10]

for id, doc in enumerate(rando):
    dl.append(semaphore.run(getPage, doc))
    print id

dl = twisted.internet.defer.DeferredList(dl)
dl.addCallbacks(lambda x: reactor.stop(), handleError)

reactor.run()
